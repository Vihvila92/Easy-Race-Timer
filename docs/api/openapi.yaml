openapi: 3.1.0
info:
  title: Easy Race Timer API
  version: 0.1.0
  description: |
    Early draft OpenAPI spec (partial). Covers competitions and entries endpoints.
servers:
  - url: https://api.example.com
    description: Production (placeholder)
  - url: http://localhost:3000
    description: Local development
paths:
  /auth/signup:
    post:
      summary: User signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email }
                password: { type: string, minLength: 8 }
                organization_name: { type: string }
      responses:
        '201': { description: Created }
        '409': { description: USER_EXISTS }
  /auth/login:
    post:
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email }
                password: { type: string }
      responses:
        '200': { description: OK }
        '401': { description: INVALID_CREDENTIALS }
  /competitions:
    get:
      summary: List competitions
      parameters:
        - in: header
          name: x-org-id
          required: true
          schema: { type: string, format: uuid }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 200, default: 100 }
        - in: query
          name: offset
          schema: { type: integer, minimum: 0, default: 0 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Competition'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400': { $ref: '#/components/responses/OrgHeaderRequired' }
    post:
      summary: Create competition
      parameters:
        - in: header
          name: x-org-id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCompetition'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Competition' }
        '400': { $ref: '#/components/responses/OrgHeaderRequired' }
        '422': { $ref: '#/components/responses/ValidationError' }
  /competitions/{id}:
    get:
      summary: Competition detail
      parameters:
        - in: header
          name: x-org-id
          required: true
          schema: { type: string, format: uuid }
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200': { description: OK }
        '404': { $ref: '#/components/responses/NotFound' }
  /competitors:
    get:
      summary: List competitors
      parameters:
        - in: header
          name: x-org-id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200': { description: OK }
    post:
      summary: Create competitor
      parameters:
        - in: header
          name: x-org-id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '201': { description: Created }
  /competitors/{id}:
    get:
      summary: Competitor detail
      parameters:
        - in: header
          name: x-org-id
          required: true
          schema: { type: string, format: uuid }
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200': { description: OK }
        '404': { $ref: '#/components/responses/NotFound' }
  /entries:
    post:
      summary: Create competition entry
      parameters:
        - in: header
          name: x-org-id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEntry'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Entry' }
        '400': { $ref: '#/components/responses/OrgHeaderRequired' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/EntryExists' }
        '422': { $ref: '#/components/responses/ValidationError' }
  /competitions/{id}/entries:
    get:
      summary: List entries for a competition
      parameters:
        - in: header
          name: x-org-id
          required: true
          schema: { type: string, format: uuid }
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 1000, default: 500 }
        - in: query
          name: offset
          schema: { type: integer, minimum: 0, default: 0 }
      responses:
        '200': { description: OK }
        '400': { $ref: '#/components/responses/OrgHeaderRequired' }
        '404': { $ref: '#/components/responses/NotFound' }
components:
  responses:
    OrgHeaderRequired:
      description: Missing x-org-id header
    ValidationError:
      description: Validation failure
    NotFound:
      description: Resource not found
    EntryExists:
      description: Competitor already entered in competition
  schemas:
    Pagination:
      type: object
      properties:
        limit: { type: integer }
        offset: { type: integer }
        count: { type: integer }
    Competition:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        start_time: { type: string, format: date-time, nullable: true }
        created_at: { type: string, format: date-time }
    CreateCompetition:
      type: object
      required: [ name ]
      properties:
        name: { type: string, minLength: 1, maxLength: 200 }
        start_time: { type: string, format: date-time }
    CreateEntry:
      type: object
      required: [ competition_id, competitor_id ]
      properties:
        competition_id: { type: string, format: uuid }
        competitor_id: { type: string, format: uuid }
        bib_number: { type: integer, minimum: 1 }
    Entry:
      type: object
      properties:
        id: { type: string, format: uuid }
        competition_id: { type: string, format: uuid }
        competitor_id: { type: string, format: uuid }
        bib_number: { type: integer, nullable: true }
        created_at: { type: string, format: date-time }
